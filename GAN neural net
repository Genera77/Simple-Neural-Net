import torch
import torch.nn as nn
import torch.nn.functional as F

# define the discriminator network
class Discriminator(nn.Module):
  def __init__(self, input_size, hidden_size, output_size):
    super().__init__()

    # define the layers of the discriminator
    self.fc1 = nn.Linear(input_size, hidden_size)
    self.fc2 = nn.Linear(hidden_size, hidden_size)
    self.fc3 = nn.Linear(hidden_size, output_size)

  def forward(self, x):
    # pass the input tensor through the discriminator layers
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = F.sigmoid(self.fc3(x))

    return x

# define the generator network
class Generator(nn.Module):
  def __init__(self, input_size, hidden_size, output_size):
    super().__init__()

    # define the layers of the generator
    self.fc1 = nn.Linear(input_size, hidden_size)
    self.fc2 = nn.Linear(hidden_size, hidden_size)
    self.fc3 = nn.Linear(hidden_size, output_size)

  def forward(self, x):
    # pass the input tensor through the generator layers
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = F.tanh(self.fc3(x))

    return x

# define the GAN model
class GAN(nn.Module):
  def __init__(self, input_size, hidden_size, output_size):
    super().__init__()

    # instantiate the discriminator and generator networks
    self.discriminator = Discriminator(input_size, hidden_size, output_size)
    self.generator = Generator(input_size, hidden_size, output_size)

  def forward(self, x):
    # forward pass through the generator to generate fake data
    fake_data = self.generator(x)

    # forward pass through the discriminator to classify real vs fake data
    classification = self.discriminator(fake_data)

    return classification

# create an instance of the GAN model
model = GAN(input_size=100, hidden_size=32, output_size=1)

# print the model structure
print(model)
