#This script first creates the original data set, 
which consists of the points (1,2), (3,4), and (5,6). 
It then creates a rotation matrix, which represents a 
90 degree rotation. The matrix is then used to apply 
the rotation to the data points, resulting in the rotated data set. 
Finally, the script plots both the original and rotated data 
sets, providing a visual representation of the transformation.

import matplotlib.pyplot as plt
import numpy as np

# Create the original data set
data = [(1,2), (3,4), (5,6)]

# Create the rotation matrix
theta = np.pi / 2 # 90 degrees
R = np.array([[np.cos(theta), -np.sin(theta)],
              [np.sin(theta), np.cos(theta)]])

# Apply the rotation to the data
rotated_data = []
for point in data:
    rotated_data.append(np.dot(R, point))

# Plot the original and rotated data
plt.scatter(*zip(*data), c='b')
plt.scatter(*zip(*rotated_data), c='r')
plt.show()
